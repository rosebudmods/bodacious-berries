plugins {
    id "fabric-loom" version "1.6.+"
    id "io.github.juuxel.loom-quiltflower" version "1.10.0"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "java-library"
    id "maven-publish"
}

int javaVersion = Integer.parseInt(project.java_version)

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

loom {
    runs {
        client {
            vmArgs "-Dfabric-tag-conventions-v1.legacyTagWarning=DEV_VERBOSE"
        }
    }
}

repositories {
    maven { url = "https://maven.gegy.dev/" }
    maven { url = "https://maven.terraformersmc.com/releases/" }
    maven { url = "https://maven.quiltmc.org/repository/release/" }
    mavenCentral()
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

configurations {
    shadow
    api.extendsFrom shadow
}

dependencies {
    // minecraft, mappings, loader
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings("org.quiltmc:quilt-mappings:${project.minecraft_version}+build.${project.quilt_mappings}:intermediary-v2")
    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")

    // emi - recipe viewer
    modImplementation("dev.emi:emi-fabric:${emi_version}") { transitive = false }

    // dependencies for config
    shadow("com.electronwill.night-config:core:${project.night_config_version}")
    shadow("com.electronwill.night-config:toml:${project.night_config_version}")
    modImplementation("com.terraformersmc:modmenu:${project.mod_menu_version}") { transitive = false }

    // fabric api
    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}")
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.deprecation(true)
    it.options.incremental(true)
    it.options.release.set(javaVersion)
}

shadowJar {
    dependsOn jar
    configurations = [project.configurations.shadow]
    destinationDirectory.set(file("${project.buildDir}/devlibs"))
    archiveClassifier.set('dev')
}
remapJar.dependsOn(shadowJar)

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = javaVersion
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}
